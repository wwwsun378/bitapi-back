spring.profiles.active=dev
server.servlet.context-path=/
########################################################################################################################
#应用相关配置
server.port=8075
spring.application.name=ii-backstage
########################################################################################################################
#注册中心相关配置
eureka.client.serviceUrl.defaultZone=http://127.0.0.1:8081/eureka/
eureka.client.healthcheck.enabled=false
eureka.instance.prefer-ip-address=true
eureka.instance.instance-id=${spring.cloud.client.ip-address}:${server.port}
########################################################################################################################

# 下面为连接池的补充设置，应用到上面所有数据源中
# 初始化大小，最小，最大
spring.datasource.initialSize=5
spring.datasource.minIdle=5
spring.datasource.maxActive=20
# 配置获取连接等待超时的时间 60s
spring.datasource.maxWait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
#spring.datasource.timeBetweenEvictionRunsMillis=60000
spring.datasource.timeBetweenEvictionRunsMillis=20000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.minEvictableIdleTimeMillis=300000
spring.datasource.validationQuery=SELECT 1 FROM DUAL
spring.datasource.testWhileIdle=true
spring.datasource.testOnBorrow=false
spring.datasource.testOnReturn=false
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.poolPreparedStatements=true
spring.datasource.maxPoolPreparedStatementPerConnectionSize=20
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.filters=stat,slf4j
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
# 合并多个DruidDataSource的监控数据
spring.datasource.useGlobalDataSourceStat=true
########################################################################################################################

#配置文件传输
spring.servlet.multipart.enabled =true
spring.servlet.multipart.file-size-threshold =0
#单个数据的大小
spring.servlet.multipart.max-file-size = 100MB
#总数据的大小
spring.servlet.multipart.max-request-size=100MB
########################################################################################################################
#####   redis相关配置   #####
#最大活动对象数
spring.redis.pool.maxTotal=1000
#最大能够保持idel状态的对象数
spring.redis.jedis.pool.max-idle=100
#最小能够保持idel状态的对象数
spring.redis.jedis.pool.min-idle=50
#当池内没有返回对象时，最大等待时间
spring.redis.pool.maxWaitMillis=10000
spring.redis.host=127.0.0.1
spring.redis.password=
spring.redis.port=6379
########################################################################################################################
#####  日志相关配置
logging.config=classpath:logback-spring.xml
#logging.tcphost=52.81.9.94:30514
logging.config.path=logs/
logging.level.root=INFO
logging.myFileName=${spring.application.name}
logging.maxFileSize=100MB
logging.maxHistory=90
########################################################################################################################
#       其他固定不会改的配置

#当遇到同样名字的时候，是否允许覆盖注册
spring.main.allow-bean-definition-overriding=true
#设置响应为utf-8
spring.http.encoding.force-response=true
spring.jmx.enabled=false
##########################################
file.upload.impl=dirFile
#file.local.basedir=C://export
file.local.basedir=C://export
feign.uploadfile.name=ii-backstage
export.exportFilePath=C://export//
########################################################################################################################
#短信服务相关配置
#短信发送的实现类。默认为云通讯。连云港请配置LygSendMessageServiceImpl
#message.ii.impl=LygSendMessageServiceImpl
message.ii.impl=YuntongxunSendMessageServiceImpl
#message.ii.impl=TlsSendMessageServiceImpl
#* appId：8a216da856ff04b2015703229340032e
#* ACCOUNT SID：8a48b55152825d7b01528b620bfd1856
#* auth_token:3bb547f2fb5842a7bb689adc97d4d62f
#云通讯的应用id
message.yuntongxun.appid=8a216da856ff04b2015703229340032e
#云通讯的应用account_sid
message.yuntongxun.account=8a48b55152825d7b01528b620bfd1856
#云通讯的应用auth_token
message.yuntongxun.token=3bb547f2fb5842a7bb689adc97d4d62f
#短信验证码的template_id
message.yuntongxun.verifyCode_template_id=601724
#云通讯定义的通知类模板ID
message.yuntongxun.notice_template_id=391638
#短信服务的发送方式：1.feignClient:message项目和本项目依赖在一起的。2.http:使用httpClient去请求message服务。
message.yuntongxun.sendType=feignClient
#当使用http的方式调用时，需要指定请求的地址
message.yuntongxun.http.serverUrl=